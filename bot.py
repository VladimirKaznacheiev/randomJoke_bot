import asyncio

import config
import logging
import requests
from bs4 import BeautifulSoup as BS
from database import Database
from aiogram import Bot, Dispatcher, executor, types
import schedule, time

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)
# initialising database
db = Database('randomJoke.db')

# keyboard
keyboardMarkup = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("üòÇ–†–∞–Ω–¥–æ–º–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç")
item2 = types.KeyboardButton("‚ÑπÔ∏è–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
item3 = types.KeyboardButton("ü§ñ–û –±–æ—Ç–µ")
keyboardMarkup.add(item1).add(item2).add(item3)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.id)

    sticker = open('AnimatedSticker1.tgs', 'rb')
    await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –∫–∞–∂–¥—ã–π —á–∞—Å!üòú –ß—Ç–æ –±—ã —è –æ—Ç–ø—Ä–∞–≤–∏–ª '
                                            '—Ç–µ–±–µ –µ—â–µ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É!üëáÔ∏è                                     –ï—Å–ª–∏ '
                                            '—Ö–æ—á–µ—à—å –æ—Ç–ø–∏—Å–∞—Ç—Å—è –æ—Ç –µ–∂–µ—á–∞—Å–æ–≤–æ–π '
                                            '—Ä–∞—Å—Å—ã–ª–∫–∏, –Ω–∞–ø–∏—à–∏ /unsubscribeüîï',
                           reply_markup=keyboardMarkup)
    # await bot.send_message(message.chat.id, message.from_user.id)
    await bot.send_sticker(message.chat.id, sticker)


@dp.message_handler(commands=['subscribe'])
async def subscribe(message: types.Message):
    if not db.get_subscription(message.chat.id):
        db.update_subscription(message.chat.id, True)
        await bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!üòú –ß—Ç–æ –±—ã –æ—Ç–ø–∏—Å–∞—Ç—Å—è, –≤–≤–µ–¥–∏—Ç–µ /unsubscribe")
    elif db.get_subscription(message.chat.id):
        await bot.send_message(message.chat.id, '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!üòÖ')


@dp.message_handler(commands=['unsubscribe'])
async def unsubscribe(message: types.Message):
    if not db.get_subscription(message.chat.id):
        await bot.send_message(message.chat.id, '–í—ã —É–∂–µ –æ—Ç–ø–∏—Å–∞–Ω—ã!üòÖ')
    elif db.get_subscription(message.chat.id):
        db.update_subscription(message.chat.id, False)
        await bot.send_message(message.chat.id,
                               "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å.üòü –ß—Ç–æ –±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ /subscribe")


@dp.message_handler(content_types=['text'])
async def get_joke(message: types.message):
    if message.text == 'üòÇ–†–∞–Ω–¥–æ–º–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç':
        await send_joke(message)
    elif message.text == "‚ÑπÔ∏è–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await bot.send_message(message.chat.id,
                               "–†–∞–∑–Ω–∏—Ü–∞(–°–º–µ—à–Ω–æ - –ù–µ —Å–º–µ—à–Ω–æ) ‚û°Ô∏è" + str(db.get_difference(message.from_user.id)))
        await bot.send_message(message.chat.id,
                               "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!üòú" if db.get_subscription(message.from_user.id) else "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.üòü")
    elif message.text == "ü§ñ–û –±–æ—Ç–µ":
        await bot.send_message(message.chat.id, "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç, –Ω–∞–ø–∏—Å–∞–Ω—ã–π –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–æ–≤."
                                                "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –ø–æ –∑–∞–ø—Ä–æ—Å—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–µ–∫–¥–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ò–º–µ–µ—Ç "
                                                "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤ –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î. –†–∞—Å—Å—ã–ª–∫–∞ "
                                                "–∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º - –∫–∞–∂–¥—ã–π —á–∞—Å, –µ—Å–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞(–ø—Ä–∏ "
                                                "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)."
                                                "–ê–Ω–µ–≥–¥–æ—Ç—ã –ø–∞—Ä—Å—è—Ç—Å—è —Å —Å–µ—Ä–≤–∏—Å–∞ https://nekdo.ru/random –ø–ª–∞–≥–∏–Ω–æ–º "
                                                "BeautifulSoup4. –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite. "
                                                "–ê —Ç–æ—á–Ω–µ–µ: Telegram-ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ä–∞–∑–Ω–∏—Ü–∞('–°–º–µ—à–Ω–æ' - '–ù–µ —Å–º–µ—à–Ω–æ'), "
                                                "—Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


async def scheduled(wait_for, message: types.Message):
    while True:
        if db.get_subscription(message.from_user.id):
            await send_joke(message)


@dp.callback_query_handler(lambda c: c.data)
async def callback_inline(callback_query: types.CallbackQuery):
    if callback_query.data == "funny":
        if not db.user_exists(callback_query.from_user.id):
            db.add_user(callback_query.from_user.id)
        await bot.send_message(callback_query.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç, —è —Å—Ç–∞—Ä–∞—é—Å—å!üòä")

        db.update_difference(callback_query.from_user.id, int(db.get_difference(callback_query.from_user.id)) + 1)

    elif callback_query.data == "not_funny":
        if not db.user_exists(callback_query.from_user.id):
            db.add_user(callback_query.from_user.id)
        await bot.send_message(callback_query.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç, –∏–∑–≤–∏–Ω–∏—Ç–µ.üò¢")
        db.update_difference(callback_query.from_user.id, int(db.get_difference(callback_query.from_user.id)) - 1)
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,
                                text=callback_query.message.text, reply_markup=None)
    await bot.answer_callback_query(callback_query.id, show_alert=False, text="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µüòä")


async def send_joke(message: types.message):
    inline_markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton("–°–º–µ—à–Ω–æüòÇ", callback_data='funny'),
                types.InlineKeyboardButton("–ù–µ —Å–º–µ—à–Ω–æüòï", callback_data='not_funny')
            ],
            [
                types.InlineKeyboardButton("–ï—â—ë –∞–Ω–µ–∫–¥–æ—Ç—ãüîó", url="https://nekdo.ru/random")
            ]
        ]
    )

    r = requests.get("https://nekdo.ru/random")
    html = BS(r.content, 'html.parser')
    sticker = open('sticker1.webp', 'rb')
    await bot.send_message(message.chat.id, html.find("div", {"class": "text"}).text, reply_markup=inline_markup)


if __name__ == '__main__':
    # loop = asyncio.get_event_loop()
    # loop.create_task(scheduled(10))
    executor.start_polling(dp, skip_updates=True)
